---
# Todo : selinux configuration
- name: Confirm selinux deployed
  stat:
    path: /etc/selinux/config
  when:
    - ansible_os_family == "RedHat"
    - "'Amazon' not in ansible_distribution"
  register: slc

- name: Set selinux policy
  selinux:
    policy: targeted
    state: "{{ preinstall_selinux_state }}"
  when:
    - ansible_os_family == "RedHat"
    - "'Amazon' not in ansible_distribution"
    - slc.stat.exists
  changed_when: False
  tags:
    - bootstrap-os

- name: Disable IPv6 DNS lookup
  lineinfile:
    dest: /etc/gai.conf
    line: "precedence ::ffff:0:0/96  100"
    state: present
    create: yes
    backup: yes
  when:
    - disable_ipv6_dns
    - not ansible_os_family in ["Flatcar Container Linux by Kinvolk"]
  tags:
    - bootstrap-os

- name: Stat sysctl file configuration
  stat:
    path: "{{ sysctl_file_path }}"
  register: sysctl_file_stat
  tags:
    - bootstrap-os

- name: Change sysctl file path to link source if linked
  set_fact:
    sysctl_file_path: "{{ sysctl_file_stat.stat.lnk_source }}"
  when:
    - sysctl_file_stat.stat.islnk is defined
    - sysctl_file_stat.stat.islnk
  tags:
    - bootstrap-os

- name: Make sure sysctl file path folder exists
  file:
    name: "{{ sysctl_file_path | dirname }}"
    state: directory

- name: Enable ip forwarding
  sysctl:
    sysctl_file: "{{ sysctl_file_path }}"
    name: net.ipv4.ip_forward
    value: 1
    state: present
    reload: yes

- name: Ensure kube-bench parameters are set
  sysctl:
    sysctl_file: /etc/sysctl.d/bridge-nf-call.conf
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  with_items:
    - { name: vm.overcommit_memory, value: 1 }
    - { name: kernel.panic, value: 10 }
    - { name: kernel.panic_on_oops, value: 1 }
  when: kubelet_protect_kernel_defaults|bool

- name: Set sysctl config in system
  sysctl:
    sysctl_file: /etc/sysctl.d/containeros.conf
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  with_items:
    - { name: user.max_user_namespaces, value: 28633 }                 # cargo need it, Please don't remove
    - { name: vm.swappiness, value: 0 }
    - { name: vm.overcommit_memory, value: 1 }
    - { name: vm.max_map_count, value: 262144 }
    - { name: vm.panic_on_oom, value: 0 }
    - { name: fs.file-max, value: 2097152 }
    - { name: fs.inotify.max_user_watches, value: 524288 }
    - { name: fs.inotify.max_user_instances, value: 16384 }
    - { name: kernel.pid_max, value: 4194303 }
    - { name: kernel.panic, value: 10 }
    - { name: kernel.panic_on_oops, value: 1 }
    - { name: kernel.keys.root_maxkeys, value: 1000000 }
    - { name: kernel.keys.root_maxbytes, value: 25000000 }
    - { name: net.core.somaxconn, value: 65535 }
    - { name: net.core.netdev_max_backlog, value: 65535 }
    - { name: net.ipv4.tcp_fin_timeout, value: 30 }
    - { name: net.ipv4.tcp_max_syn_backlog, value: 262144 }
    - { name: net.ipv4.tcp_slow_start_after_idle, value: 0 }
    - { name: net.ipv4.tcp_syn_retries, value: 3 }
    - { name: net.ipv4.tcp_synack_retries, value: 3 }
    - { name: net.ipv4.tcp_tw_reuse, value: 1 }
    - { name: net.ipv4.conf.all.arp_filter, value: 1 }
    - { name: net.ipv4.conf.default.arp_filter, value: 1 }
    - { name: fs.may_detach_mounts, value: 1 }
    - { name: kernel.softlockup_panic, value: 1 }
  when: containeros_cluster|bool

- name: Update the chrony config file
  set_fact:
    chrony_service_name: "chronyd"
    chrony_config_file: "/etc/chrony.conf"
  when:
    - ansible_os_family in ["CentOS","RedHat"]
    - network_time_sync|bool

- name: Sync chrony template
  template:
    src: chrony.conf.j2
    dest: "{{ chrony_config_file }}"
  when:
    - ansible_os_family in ["CentOS","RedHat"]
    - network_time_sync|bool

- name: Use nptdate sync the time
  shell: "/usr/sbin/ntpdate -u -s {{ ntp_server_list[0] }} && hwclock --systohc"
  register: ntpdate_result
  until: ntpdate_result is success
  retries: 3
  delay: 5
  when:
    - ansible_os_family in ["CentOS","RedHat"]
    - network_time_sync|bool

- name: Enable chrony to start on boot
  service:
    name: "{{ chrony_service_name }}"
    enabled: yes
    state: restarted
  when:
    - ansible_os_family in ["CentOS","RedHat"]
    - network_time_sync|bool
